import matplotlib.pyplot as plt
import numpy as np

data10 = np.load("../results/evaluation/Accuracy_Noise_douplets.npz")
data25 = np.load("../results/evaluation/Accuracy_Noise_douplets_10x25.npz")
data50 = np.load("../results/evaluation/Accuracy_Noise_douplets_10x50.npz")
plt.figure(figsize=(15,5))
plt.subplot(1,3,1)
plt.plot(data10['noise'], data10['acc_0'], label = "0 douplets")
plt.plot(data10['noise'], data10['acc_1'], label = "1 douplet")
plt.plot(data10['noise'], data10['acc_2'], label = "2 douplets")
plt.plot(data10['noise'], data10['acc_3'], label = "3 douplets")
plt.ylabel('Accuracy')
plt.xlabel('Beta [%]')
plt.ylim([0.55, 0.825])
plt.title('A')
plt.legend()

plt.subplot(1,3,2)
plt.plot(data25['noise'], data25['acc_0'], label = "0 douplets")
plt.plot(data25['noise'], data25['acc_1'], label = "1 douplet")
plt.plot(data25['noise'], data25['acc_2'], label = "2 douplets")
plt.plot(data25['noise'], data25['acc_3'], label = "3 douplets")
plt.ylabel('Accuracy')
plt.xlabel('Beta [%]')
plt.ylim([0.55, 0.825])
plt.title('B')
plt.legend()

plt.subplot(1,3,3)
plt.plot(data50['noise'], data50['acc_0'], label = "0 douplets")
plt.plot(data50['noise'], data50['acc_1'], label = "1 douplet")
plt.plot(data50['noise'], data50['acc_2'], label = "2 douplets")
plt.plot(data50['noise'], data50['acc_3'], label = "3 douplets")
plt.ylabel('Accuracy')
plt.xlabel('Beta [%]')
plt.ylim([0.55, 0.825])
plt.title('C')
plt.legend()

plt.tight_layout()
plt.savefig('../results/evaluation/Accuracy_Noise_douplets_size.png')
plt.show()

"""
data_cluster = np.load("../results/learning_curves/Learning_Curves_cluster.npz")
data_sorted = np.load("../results/learning_curves/Learning_Curves_sorted.npz")

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(data_cluster['train_acc'], label = "Training Data Clustered")
plt.plot(data_cluster['test_acc'], label = "Testing Data Clustered")
plt.plot(data_sorted['train_acc'], label = "Training Data Numericaly Sorted")
plt.plot(data_sorted['test_acc'], label = "Testing Data Numericaly Sorted")
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('A')
plt.legend()

plt.subplot(1,2,2)
plt.plot(data_cluster['train_loss'], label = "Training Data Clustered")
plt.plot(data_cluster['test_loss'], label = "Testing Data Clustered")
plt.plot(data_sorted['train_loss'], label = "Training Data Numericaly Sorted")
plt.plot(data_sorted['test_loss'], label = "Testing Data Numericaly Sorted")
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('B')
plt.legend()

plt.tight_layout()
plt.savefig('../results/learning_curves/Learning_Curves_sorted_cluster.png')
plt.show()


data = np.load("../results/evaluation/Accuracy_Noise_fc_cnn.npz")
#print(list(data.keys()))
plt.plot(data['noise'], data['fcnn'], label = "FCNN")
plt.plot(data['noise'], data['cnn'], label = "CNN")
plt.xlabel("Beta [%]")
plt.ylabel("Accuracy")
plt.legend()
plt.savefig('../results/evaluation/Accuracy_Noise_fc_cnn.png')
plt.show()


data = np.load("../results/evaluation/Accuracy_Noise_size.npz")
plt.plot(data['noise'], data['acc_10'], label = "10x10")
plt.plot(data['noise'], data['acc_15'], label = "15x15")
plt.plot(data['noise'], data['acc_25'], label = "25x25")
plt.xlabel("Beta [%]")
plt.ylabel("Accuracy")
plt.legend()
plt.savefig('../results/evaluation/Accuracy_Noise_size.png')
plt.show()

data = np.load("../results/evaluation/Accuracy_Noise_size2.npz")
plt.plot(data['noise'], data['acc_10'], label = "10x10")
plt.plot(data['noise'], data['acc_25'], label = "10x25")
plt.plot(data['noise'], data['acc_50'], label = "10x50")
plt.xlabel("Beta [%]")
plt.ylabel("Accuracy")
plt.legend()
plt.savefig('../results/evaluation/Accuracy_Noise_size2.png')
plt.show()

"""